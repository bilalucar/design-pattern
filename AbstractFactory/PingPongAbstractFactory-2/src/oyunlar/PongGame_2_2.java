/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package oyunlar;

import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import oyunfactory.*;

/**
 *
 * @author Casper
 */
public class PongGame_2_2 extends javax.swing.JFrame {

    AnaMenu menu = null;
    static ImageIcon ft, vt, bt, mc, kc;
    Timer zaman = new Timer(8, new PongGame_2_2.TimerListener());//basket topunun hareketi
    Timer zaman4 = new Timer(8, new PongGame_2_2.TimerListener4());//futbol topunun hareketi
    Timer zaman5 = new Timer(8, new PongGame_2_2.TimerListener5());//topun hareketi
    Timer zaman3 = new Timer(30, new PongGame_2_2.TimerListener3());//oyun cubugunu konumlandırmak icin
    int sol1, solilk1, sol2, solilk2, sol3, solilk3, ust1, ustilk1, ust2, ustilk2, ust3, ustilk3, altCubuk, ustCubuk, x, y, a, b, cubukGen, solKenar, sagKenar, saniye = 0;
    boolean ss1, ya1 = true, kontrol1 = false, ss2, ya2 = true, kontrol2 = false, ss3, ya3, kontrol3 = false;
    static File dosya = new File("c:\\abce.txt");
    //sol(X) ve ust(Y) topun konumu
    //alt(Y), y(Y), x(X) oyun cubugunun konumu

    /**
     * Creates new form PongGame_2_2
     */
    public PongGame_2_2() {
        initComponents();
        jTextField1.addKeyListener(new MyKeyListener());
        jTextField1.addKeyListener(new MyKeyListener2());
        this.setResizable(false);
        jLabel1.setIcon(bt);
        jLabel6.setIcon(vt);
        jLabel7.setIcon(ft);
        jLabel3.setIcon(kc);
        jLabel2.setIcon(mc);
    }

    public void rastgele(boolean ya, boolean ss) {
        int a = (int) (Math.random() * 2);
        int b = (int) (Math.random() * 2);
        if (a == 0) {
            ss = false;
        } else if (a == 1) {
            ss = true;
        }
        if (b == 0) {
            ya = false;
        } else if (b == 1) {
            ya = true;
        }
    }

    public static void getInstance(Oyun oyun) throws IOException {
        if (dosya.exists() == false) {
            java.awt.EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    new PongGame_2_2().setVisible(true);
                }
            });
        }
        try (PrintWriter dosyaYaz = new PrintWriter(dosya)) {
            dosyaYaz.print("JAVA");
            dosyaYaz.close();
        }
        ft = (oyun.top[1].döndür());
        vt = (oyun.top[2].döndür());
        bt = (oyun.top[0].döndür());
        mc = (oyun.cubuk[0].döndür());
        kc = (oyun.cubuk[1].döndür());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(154, 154, 154))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(247, 247, 247)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(228, 228, 228)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addComponent(jLabel7))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(160, 160, 160)
                                .addComponent(jLabel6)))))
                .addContainerGap(412, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(118, 118, 118)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(58, 58, 58)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 284, Short.MAX_VALUE)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        /*rastgele(ya1,ss1);
         rastgele(ya2,ss2);
         rastgele(ya3,ss3);*/
        jLabel1.setLocation(571, 118);
        jLabel3.setLocation(220, 497);
        jLabel4.setLocation(148, 6);
        jLabel5.setLocation(641, 6);
        ImageIcon dikey = new javax.swing.ImageIcon(this.getClass().getResource("dikey.jpg"));
        ustCubuk = jLabel2.getY() + 8;
        solKenar = jLabel4.getX();
        sagKenar = jLabel5.getX() + 12;
        jLabel4.setIcon(dikey);
        jLabel5.setIcon(dikey);
        x = jLabel3.getX();
        y = jLabel3.getY();
        a = jLabel2.getX();
        b = jLabel2.getY();
        cubukGen = 88;
        Point pt1 = jLabel1.getLocation();
        sol1 = (int) pt1.getX();
        ust1 = (int) pt1.getY();
        Point pt2 = jLabel6.getLocation();
        sol2 = (int) pt2.getX();
        ust2 = (int) pt2.getY();
        Point pt3 = jLabel7.getLocation();
        sol3 = (int) pt3.getX();
        ust3 = (int) pt3.getY();
        solilk1 = sol1;
        ustilk1 = ust1;
        solilk2 = sol2;
        ustilk2 = ust2;
        solilk3 = sol3;
        ustilk3 = ust3;
        Point pt4 = jLabel3.getLocation();
        altCubuk = (int) pt4.getY() - 20;
        zaman.start();
        zaman3.start();
        zaman4.start();
        zaman5.start();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        PrintWriter dosyaYaz1;
        try {
            dosyaYaz1 = new PrintWriter(dosya);
            dosyaYaz1.print("JAVA");
            dosyaYaz1.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(PongGame_1_1.class.getName()).log(Level.SEVERE, null, ex);
        }
        dosya.delete();
        ust1 = ustilk1;
        sol1 = solilk1;
        ust2 = ustilk2;
        sol2 = solilk2;
        ust3 = ustilk3;
        sol3 = solilk3;
        zaman.stop();
        zaman4.stop();
        zaman5.stop();
        menu = null;
        try {
            AnaMenu.getInstance(false);
        } catch (IOException ex) {
            Logger.getLogger(PongGame_1_1.class.getName()).log(Level.SEVERE, null, ex);
        }
        dispose();
    }//GEN-LAST:event_formWindowClosing

    public class MyKeyListener extends KeyAdapter {

        @Override
        public void keyPressed(KeyEvent ke) {
            int keyCode = ke.getKeyCode();
            switch (keyCode) {
                case KeyEvent.VK_LEFT:
                    if (x > solKenar + 5) {
                        for (int i = 0; i < 7; i++) {
                            x--;
                        }
                    }
                    jLabel3.setLocation(x, y);
                    break;
                case KeyEvent.VK_RIGHT:
                    if (((x + jLabel3.getWidth()) < sagKenar - 5)) {
                        for (int i = 0; i < 7; i++) {
                            x++;
                        }
                    }
                    jLabel3.setLocation(x, y);
                    break;
            }
        }
    }

    public class MyKeyListener2 extends KeyAdapter {

        @Override
        public void keyPressed(KeyEvent ke2) {
            int keyCode = ke2.getKeyCode();
            switch (keyCode) {
                case KeyEvent.VK_A:
                    if (a > solKenar + 5) {
                        for (int i = 0; i < 7; i++) {
                            a--;
                        }
                    }
                    jLabel2.setLocation(a, b);
                    break;
                case KeyEvent.VK_D:
                    if (((a + jLabel2.getWidth()) < sagKenar - 5)) {
                        for (int i = 0; i < 7; i++) {
                            a++;
                        }
                    }
                    jLabel2.setLocation(a, b);
                    break;
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PongGame_2_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PongGame_2_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PongGame_2_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PongGame_2_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        AbstractOyunFactory oyun2 = new Oyun2Factory();
        Oyun oyun22 = oyun2.oyunTüret("oyun2");
        getInstance(oyun22);


        /* Create and display the form */
    }

    class TimerListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (sol1 > solKenar && ss1 == false) {
                sol1--;
                jLabel1.setLocation(sol1, ust1);
                if (ya1 == true) {
                    ust1++;
                    if (ust1 == altCubuk && sol1 > x - 15 && sol1 < x + cubukGen) {
                        ya1 = false;
                    }
                }
                if (ya1 == false) {
                    ust1--;
                    if (ust1 == ustCubuk && sol1 > a - 15 && sol1 < a + cubukGen) {
                        ya1 = true;
                    }
                }
                if (sol1 == solKenar) {
                    ss1 = true;
                }
            }
            if (ss1 == true && ((sol1 + jLabel1.getWidth()) < sagKenar - 15)) {
                sol1++;
                jLabel1.setLocation(sol1, ust1);
                if (ya1 == true) {
                    ust1++;
                    if (ust1 == altCubuk && sol1 > x - 15 && sol1 < x + cubukGen) {
                        ya1 = false;
                    }
                }
                if (ya1 == false) {
                    ust1--;
                    if (ust1 == ustCubuk && sol1 > a - 15 && sol1 < a + cubukGen) {
                        ya1 = true;
                    }
                }
                if ((sol1 + jLabel1.getWidth()) >= sagKenar - 15) {
                    ss1 = false;
                }
            }
            if (ust1 > altCubuk + 10 || ust1 < ustCubuk - 10) {
                kontrol1 = true;
            }
            if (kontrol1) {
                zaman.stop();
                zaman4.stop();
                zaman5.stop();
                JOptionPane.showMessageDialog(null, "Game Over :(");
            }
        }
    }

    class TimerListener4 implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (sol2 > solKenar && ss2 == false) {
                sol2--;
                jLabel7.setLocation(sol2, ust2);
                if (ya2 == true) {
                    ust2++;
                    if (ust2 == altCubuk && sol2 > x - 15 && sol2 < x + cubukGen) {
                        ya2 = false;
                    }
                }
                if (ya2 == false) {
                    ust2--;
                    if (ust2 == ustCubuk && sol2 > a - 15 && sol2 < a + cubukGen) {
                        ya2 = true;
                    }
                }
                if (sol2 == solKenar) {
                    ss2 = true;
                }
            }
            if (ss2 == true && ((sol2 + jLabel7.getWidth()) < sagKenar - 15)) {
                sol2++;
                jLabel7.setLocation(sol2, ust2);
                if (ya2 == true) {
                    ust2++;
                    if (ust2 == altCubuk && sol2 > x - 15 && sol2 < x + cubukGen) {
                        ya2 = false;
                    }
                }
                if (ya2 == false) {
                    ust2--;
                    if (ust2 == ustCubuk && sol2 > a - 15 && sol2 < a + cubukGen) {
                        ya2 = true;
                    }
                }
                if ((sol2 + jLabel7.getWidth()) >= sagKenar - 15) {
                    ss2 = false;
                }
            }
            if (ust2 > altCubuk + 10 || ust2 < ustCubuk - 10) {
                kontrol2 = true;
            }
            if (kontrol2) {
                zaman.stop();
                zaman4.stop();
                zaman5.stop();
                JOptionPane.showMessageDialog(null, "Game Over :(");
            }
        }
    }

    class TimerListener5 implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (sol3 > solKenar && ss3 == false) {
                sol3--;
                jLabel6.setLocation(sol3, ust3);
                if (ya3 == true) {
                    ust3++;
                    if (ust3 == altCubuk && sol3 > x - 15 && sol3 < x + cubukGen) {
                        ya3 = false;
                    }
                }
                if (ya3 == false) {
                    ust3--;
                    if (ust3 == ustCubuk && sol3 > a - 15 && sol3 < a + cubukGen) {
                        ya3 = true;
                    }
                }
                if (sol3 == solKenar) {
                    ss3 = true;
                }
            }
            if (ss3 == true && ((sol3 + jLabel6.getWidth()) < sagKenar - 15)) {
                sol3++;
                jLabel6.setLocation(sol3, ust3);
                if (ya3 == true) {
                    ust3++;
                    if (ust3 == altCubuk && sol3 > x - 15 && sol3 < x + cubukGen) {
                        ya3 = false;
                    }
                }
                if (ya3 == false) {
                    ust3--;
                    if (ust3 == ustCubuk && sol3 > a - 15 && sol3 < a + cubukGen) {
                        ya3 = true;
                    }
                }
                if ((sol3 + jLabel6.getWidth()) >= sagKenar - 15) {
                    ss3 = false;
                }
            }
            if (ust3 > altCubuk + 10 || ust3 < ustCubuk - 10) {
                kontrol3 = true;
            }
            if (kontrol3) {
                zaman.stop();
                zaman4.stop();
                zaman5.stop();
                JOptionPane.showMessageDialog(null, "Game Over :(");
            }
        }
    }

    class TimerListener2 implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            //jLabel6.setText(Integer.toString(saniye));
            saniye++;
        }
    }

    class TimerListener3 implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            //jLabel6.setText(Integer.toString(saniye));
            x++;
            a++;
            jLabel3.setLocation(x, y);
            jLabel2.setLocation(a, b);
            zaman3.stop();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
